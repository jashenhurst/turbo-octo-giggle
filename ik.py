#!/usr/bin/python3

"""
The functions in this file were written to solve the problems described by:
https://www.interviewkickstart.com/blog/advanced-python-coding-challenges

No code was generated by an LLM except where noted.
"""


import calendar
import socket


def check_dup_letters(letters):
    """Write a function in Python to check duplicate letters.  It must accept a string, i.e., a sentence.  The function
    should return True if the sentence has any word with duplicate letters, else return False."""
    letters = letters.lower()
    for character in letters:
        if letters.count(character) > 1:
            return True
    return False


def translate_to_morse(message):
    """ Write a code in Python to create a Morse code translator.  You can take a string with alphanumeric characters in
    lower or upper case.  The string can also have any special characters as a part of the Morse code.  Special
    characters can include commas, colons, apostrophes, exclamation marks, periods, and question marks.  The code
    should return the Morse code that is equivalent to the string."""

    morse_dict = {  # copied from https://www.educative.io/answers/how-to-write-a-morse-code-translator-in-python
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
        'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
        'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
        'Y': '-.--', 'Z': '--..',
        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....',
        '7': '--...', '8': '---..', '9': '----.',
        ',': '--..--', ':': '---...', "'": '.----.', '!': '-.-.--', '.': '.-.-.-', '?': '..--..',
        ' ': '/'
    }

    message = message.upper()
    ret = ''
    for character in message:
        if character in morse_dict:
            ret += morse_dict[character] + ' '
    return ret


def fri13(month, year):
    """Write a function to detect 13th Friday.  The function can accept two parameters, and both will be numbers.
    The first parameter will be the number indicating the month, and the second will be the year in four digits.
    Your function should parse the parameters, and it must return True when the month contains a Friday with the
    13th, else return False."""

    month = int(month)     # in case they're passed in as strings the way the exercise implies
    year = int(year)
    return calendar.weekday(year, month, 13) == calendar.FRIDAY


def days_this_year(year):
    # return 366 if it's a leap year, return 365 if not
    ret = 365
    year = int(year)
    if year % 4 == 0:
        ret = 366
    if year > 1752:
        # Assumes Gregorian calendar after this year; it's not a leap year if it's a multiple of 100, unless it's a
        # multiple of 400
        if year % 100 == 0:
            ret = 365
        if year % 400 == 0:
            ret = 366
    return ret


def fri13_hardmode(month_spam, year_spam):
    """The calendar module does not change to the Julian calendar for early enough days.  This function assumes a
    transition from Julian to Gregorian calendars in AD 1752, the year Great Britain and her colonies switched,
    and is made without using the calendar module, because that would make it too easy."""

    month_spam = int(month_spam)
    year_spam = int(year_spam)
    weekday = 0     # Monday is 0, as in the calendar module by default
    days_this_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    # Switching in 1752 from Julian to Gregorian means September 2nd was followed by September 14th.  So let's address
    # that year first.
    if year_spam == 1752:
        return (month_spam == 3) or (month_spam == 10)

    # Tracking the day of the week has to start somewhere, so we might as well start with after 1752.
    elif year_spam > 1752:
        # 1/1/1753 was a Monday
        # weekday is already 0
        for year in range(1753, year_spam):
            weekday = (weekday + days_this_year(year)) % 7
        # print("Jan. 1 of", year_spam, "is:", calendar.day_name[weekday])

    # Oh, a year before 1752?  Cute.
    elif year_spam > 59:
        # 1/1/60 was a Tuesday, though that's not what they called it back then.
        weekday = 1
        for year in range(60, year_spam):
            weekday = (weekday + days_this_year(year)) % 7
    elif year_spam == 0:
        raise ValueError("There was no year zero.")
    else:
        raise ValueError("Due to inconsistencies in the Roman calendar, there are multiple possibilities for the day "
                         "of the week for dates prior to AD 60.")
    if days_this_year(year_spam) == 366:
        days_this_month[2] = 29
    for month in range(1, month_spam):
        weekday = (weekday + days_this_month[month]) % 7
    # print("The first of month", month_spam, "is:", calendar.day_name[weekday])

    # Return true if the 1st of the month is Sunday, because that means the 13th is a Friday.
    return weekday == 6


def reverse_dns(ip_addr):
    """Write a function to find the domain name from the IP address. The function will accept an IPaddress,
    make a DNS request, and return the domain name that maps to that IP address while using records of PTR DNS. You
    can import the Python socket library."""

    return socket.gethostbyaddr(ip_addr)[0]     # It said I can import the socket module!


if __name__ == '__main__':
    test_strings = ("QWERTY", "QWEeRTYq")
    for i in test_strings:
        print('The string "' + i + '" has duplicate letters:', check_dup_letters(i))
    print()

    b = "The quick brown fox jumped over the lazy dog."
    print("Morse code follows for:", b)
    print(translate_to_morse(b))
    print()

    test_months = [(5, 2022), (9, 2023), ("8", "1059")]
    cal = calendar.TextCalendar()
    for i in test_months:
        # print("Here is the calendar for " + str(i[0]) + '/' + str(i[1]))
        cal.prmonth(int(i[1]), int(i[0]))
        print("The 13th is a Friday:", fri13(i[0], i[1]))
        print()

    for i in test_months:
        print("(Hard-mode)  The 13th of " + str(i[0]) + '/' + str(i[1]), "is a Friday:", fri13_hardmode(i[0], i[1]))
        print()

    # for i in range(130, 158):
    #     print(reverse_dns("162.252.205." + str(i)))
